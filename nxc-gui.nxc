#define DISPLAY_WIDTH 100
#define DISPLAY_HEIGHT 64

#define LETTER_WIDTH    6
#define LETTER_HEIGHT  10

#define CORNER_LEFT     0
#define CORNER_CENTER   1
#define CORNER_RIGHT    2

#define CORNER_TOP      0
#define CORNER_BOTTOM   2

char textWidth(string text) {
    return (ArrayLen(text) - 1) * LETTER_WIDTH;
}

void CornerDrawText(string text, char horizontal_corner, char vertical_corner) {
    char xCoord;
    char yCoord;
    switch (horizontal_corner) {
        case CORNER_LEFT:   { xCoord = 0; break; }
        case CORNER_CENTER: { xCoord = (DISPLAY_WIDTH - textWidth(text)) / 2; break; }
        case CORNER_RIGHT:  { xCoord = DISPLAY_WIDTH - textWidth(text) - 1; break; }
    }
    
    switch (vertical_corner) {
        case CORNER_TOP:     { yCoord = DISPLAY_HEIGHT - 1; break; }
        case CORNER_CENTER:  { yCoord = (DISPLAY_HEIGHT - LETTER_HEIGHT) / 2; break; }
        case CORNER_BOTTOM:  { yCoord = 0; break; }
    }
    TextOut(xCoord, yCoord, text);
}

void ButtonLegend(string left, string center, string right) {
    CornerDrawText(left, CORNER_LEFT, CORNER_BOTTOM);
    CornerDrawText(center, CORNER_CENTER, CORNER_BOTTOM);
    CornerDrawText(right, CORNER_RIGHT, CORNER_BOTTOM);
}

unsigned char WaitForButtonPress(string left, string center, string right) {
    ButtonLegend(left, center, right);
    while (!ButtonPressed(BTNLEFT, false) && !ButtonPressed(BTNCENTER, false) && !ButtonPressed(BTNRIGHT, false))
        Wait(50);
    
    char out;
    if (ButtonPressed(BTNLEFT, false)) 
        out = BTNLEFT;
    else if (ButtonPressed(BTNRIGHT, false)) 
        out = BTNRIGHT;
    else
        out = BTNCENTER;
    
    while (ButtonPressed(BTNLEFT, false) || ButtonPressed(BTNCENTER, false) || ButtonPressed(BTNRIGHT, false))
        Wait(50);
    
    return out;
}

int NumberPicker(int defaultVal, string name, char min = 0, char max = 99) {
    int currentVal = defaultVal < 1 ? 1 : defaultVal;
    
    ClearScreen();
    CornerDrawText(name, CORNER_CENTER, CORNER_TOP);
    ButtonLegend(STRING_LESS, STRING_OK, STRING_MORE);
    
    // Determine maxVal
    while (true) {
        CornerDrawText("   ", CORNER_CENTER, CORNER_CENTER);
        CornerDrawText(NumToStr(currentVal), CORNER_CENTER, CORNER_CENTER);
        
        // Wait for button press
        while (!ButtonPressed(BTNLEFT, false) && !ButtonPressed(BTNCENTER, false) && !ButtonPressed(BTNRIGHT, false))
            Wait(50);
        
        
        // Left button pressed
        if (ButtonPressed(BTNLEFT, false) && currentVal > min) {
            currentVal -= 1;
            
            ButtonLegend(STRING_LESS, STRING_OK, STRING_MORE);
            if (currentVal <= min)
                ButtonLegend("    ", STRING_OK, STRING_MORE);
        }
        // Right button pressed
        else if (ButtonPressed(BTNRIGHT, false) && currentVal < max) {
            currentVal += 1;
            
            ButtonLegend(STRING_LESS, STRING_OK, STRING_MORE);
            if (currentVal <= min)
                ButtonLegend(STRING_LESS, STRING_OK, "    ");
        }
        // Center button pressed
        else if (ButtonPressed(BTNCENTER, false))
            return currentVal;
        
        while (ButtonPressed(BTNLEFT, false) || ButtonPressed(BTNCENTER, false) || ButtonPressed(BTNRIGHT, false))
            Wait(50);
    }
        
    int maxVal = currentVal;
}

void Loading(unsigned char progress) {
    LineOut(0, DISPLAY_HEIGHT - 1, progress, DISPLAY_HEIGHT - 1);
}
